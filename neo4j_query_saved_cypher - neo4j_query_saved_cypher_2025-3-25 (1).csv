name,description,query,id,parentId,isFolder
visualize schema,,CALL db.schema.visualization(),0,,FALSE
create employee instance,,"CREATE (:employee {
    id: '12244',
    name: 'John Doe',
    email: 'john.doe@example.com',
    telephone: '555-1234',
    address: '123 Main St, Anytown, USA',
    last_check_in: datetime('2025-03-15T12:34:56'),
    department: 'Sales',
    salary: 75000,
    age: 35,
    managers_id: 5678,
    position: 'Manager',
    relatives_id: 6789.0,
    start_date: date('2017-08-23'),
    end_date: null
})",1,,FALSE
"read all (id, name, salary)",,"// чтение всех пользователей по порядку -- можно прочитать все, но для скорости давайте считаем только имена, айди и зарплаты
MATCH (u:employee)
RETURN u.id, u.name, u.salary
ORDER BY u.id ASC",2,,FALSE
update salary,,"// обновление зарплаты пользователя
MATCH (u:employee {name: 'John Mcfarland'})
SET u.salary = 1500000
RETURN u",3,,FALSE
view relationship types,,CALL db.relationshipTypes(),4,,FALSE
show where manager is younger than the subordinate,,"MATCH (subordinate:employee)-[:is_manager]->(manager:employee)
WHERE manager.position <> 'Specialist'
AND manager.age < subordinate.age
RETURN manager.id AS ManagerID,
       manager.name AS ManagerName,
       manager.position AS ManagerPosition,
       manager.age AS ManagerAge,
       subordinate.id AS SubordinateID,
       subordinate.name AS SubordinateName,
       subordinate.age AS SubordinateAge,
       subordinate.position AS SubordinatePosition",5,,FALSE
show where manager is younger than the subordinate and has a higher salary,,"MATCH (subordinate:employee)-[:is_manager]->(manager:employee)
WHERE manager.position <> 'Specialist'
AND manager.age < subordinate.age
AND manager.salary < subordinate.salary
RETURN manager.id AS ManagerID,
       manager.name AS ManagerName,
       manager.position AS ManagerPosition,
       manager.age AS ManagerAge,
       manager.salary AS ManagerSalary,
       subordinate.id AS SubordinateID,
       subordinate.name AS SubordinateName,
       subordinate.age AS SubordinateAge,
       subordinate.position AS SubordinatePosition,
       subordinate.salary AS SubordinateSalary",6,,FALSE
count cases where manager is younger than the subordinate and has a higher salary,,"MATCH (subordinate:employee)-[:is_manager]->(manager:employee)
WHERE manager.position <> 'Specialist'
AND manager.age < subordinate.age
AND manager.salary < subordinate.salary
WITH manager, subordinate
RETURN COUNT(*) AS TotalPairs",7,,FALSE
"show where manager is younger than the subordinate and has a higher salary, return all the information and salary difference",,"MATCH (subordinate:employee)-[:is_manager]->(manager:employee)
WHERE manager.position <> 'Specialist'
AND manager.age < subordinate.age
AND manager.salary < subordinate.salary
RETURN manager.id AS ManagerID,
       manager.name AS ManagerName,
       manager.position AS ManagerPosition,
       manager.age AS ManagerAge,
       manager.salary AS ManagerSalary,
       subordinate.id AS SubordinateID,
       subordinate.name AS SubordinateName,
       subordinate.age AS SubordinateAge,
       subordinate.position AS SubordinatePosition,
       subordinate.salary AS SubordinateSalary,
       subordinate.salary - manager.salary AS SalaryDifference",8,,FALSE
show the shortest path (3) between employee 123 and employee 456,,"MATCH p = shortestPath((start:employee {id: 123})-[*..3]-(end:employee {id: 456}))
RETURN p",9,,FALSE
show the shortest path (3) between employee 1 and employee 998,,"MATCH p = shortestPath((start:employee {id: 1})-[*..3]-(end:employee {id: 998}))
RETURN p",10,,FALSE
show the shortest path (3) between employee 3759 and employee 998,,"MATCH p = shortestPath((start:employee {id: 3759})-[*..3]-(end:employee {id: 998}))
RETURN p",11,,FALSE
show information on employees with top-5 salaries by department,,"MATCH (employee:employee)
WITH employee.department AS Department, employee.name AS Name, employee.position AS Position, employee.salary AS Salary
ORDER BY Salary DESC
WITH Department, collect({name: Name, position: Position, salary: Salary})[..5] AS TopSalaries
RETURN Department, TopSalaries",12,,FALSE
show managers that are relatives to their subordinates,,"MATCH (employee:employee)-[:is_relative]->(relative:employee),
      (employee)-[:is_manager]->(relative)
WHERE employee <> relative
RETURN employee.id AS EmployeeID, employee.name AS EmployeeName,
       relative.id AS RelativeID, relative.name AS RelativeName",13,,FALSE
show relatives count by department,,"MATCH (employee:employee)
OPTIONAL MATCH (employee)-[:is_relative]->(relative:employee)
WHERE employee.department = relative.department
WITH employee.department AS Department, count(relative) AS RelativesCount
RETURN Department, RelativesCount
ORDER BY RelativesCount DESC",14,,FALSE
create relationship (14 is_relative for 15),,"MATCH (worker1:employee {id: 14}), (worker2:employee {id: 15})
CREATE (worker1)-[:is_relative]->(worker2);",15,,FALSE
check relationship,,"MATCH (worker1:employee {id: 14})-[rel:is_relative]->(worker2:employee {id: 15})
RETURN worker1, rel, worker2;",16,,FALSE
delete relationship,,"MATCH (:employee {id: 14})-[rel:is_relative]->(:employee {id: 15})
DELETE rel;",17,,FALSE
delete by id,,"// удаление по id
MATCH (employee:employee {id: 345})
DETACH DELETE employee;",18,,FALSE